package com.practice;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class PracticeServer {
	
	private ServerSocket serversocket;
	private Socket sock;
	private ServerGUI gui;
	private String msg;
	
//	세번째 중요한 것은 사용자들의 정보를 저장하는 맵!
	private Map<String,DataOutputStream> clientsMap = new HashMap();
	
	public final void setGui(ServerGUI gui) {
		this.gui = gui;		
	}
	

	public void setting(){
		try {
			Collections.synchronizedMap(clientsMap);//clientsMap을 교통정리 해주는 코드!
			serversocket = new ServerSocket(6000);
			//	서버가 할 일 :  계속 반복해서 사용자를 받고 리시버를 생성
			while(true){
			/*첫번째. 서버가 할 일 분담*/
				System.out.println("서버 접속 대기...");
				sock = serversocket.accept(); 
				System.out.println(sock.getInetAddress() + "클라이언트가 서버에 연결되었습니다");				
				Receiver receiver = new Receiver(sock);
				receiver.start();
			}	
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void main(String[] args) {
		PracticeServer practiceserver = new PracticeServer();
		practiceserver.setting();
	}

	// 맵의 내용 저장과 삭제
	public void addClient(String nick, DataOutputStream dos2) {
		sendMessage("<"+nick+">" + "님이 접속하셨습니다.\n");
		clientsMap.put(nick, dos2);
	}
	
	public void removeClient(String nick){
		sendMessage("<"+nick+">" + "님이 나가셨습니다\n");
		clientsMap.remove(nick);
	}
//	메세지 내용 전파
	public void sendMessage(String msg) {
		Iterator<String> it = clientsMap.keySet().iterator();
		
//	콜렉션에서 하나씩 빼내서 key나 value를 받아오는 것
		String key;
		while(it.hasNext()){
			key = it.next();
			try {
				clientsMap.get(key).writeUTF(msg);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	

	//-----------------------------------------------------------------------//
//	내부 클래스 생성
	class Receiver extends Thread{
		
		private DataInputStream dis;
		private DataOutputStream dos;
		private String nick;
		
	//	두번째. 리시버가 할 일 : 네트워크 소켓을 받아서 계속 듣고, 요청하는 일
	
		public Receiver(Socket sock) {
			try{
				dis = new DataInputStream(sock.getInputStream());
				dos = new DataOutputStream(sock.getOutputStream());		
				
//	리시버가 처음에는 클라이언트 아이디를 받아와야함!
				nick = dis.readUTF();
				addClient(nick,dos);
				
				
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		

		@Override
		public void run() {
			try{
//	이제 run은 계속 듣기만 한다
				while(dis!=null){
					msg = dis.readUTF();
					sendMessage(msg);
					gui.appendMsg(msg);
				} 
			} catch(IOException e){
				//사용접속 종료 시 여기서 에러 발생. 그럼 나간거니까. 클라이언트 제거
				System.out.println(nick + "이 나갔습니다.");
				removeClient(nick);
			}
		
			
		}
		
	}
}
