package com.bit.day22.cs04;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;

public class BitServer extends Thread{
	Socket sock;
	static ArrayList<Socket> list = new ArrayList();

//	모두에게 들어오는 대화를 보여줄 sayAll 메소드 생성
	public void sayAll(String msg){
		for(int i=0; i<list.size(); i++){
			OutputStream os = null;
			PrintStream ps = null;
//	임시로 소켓들을 저장할 temp 생성
			Socket temp = list.get(i);
//	소켓들에서 나오는 I.O를 내보냄
			try {
				os = temp.getOutputStream();
				ps = new PrintStream(os);
//	인자로 전달받은 메세지 출력
				ps.println(msg);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	
	public void run() {
		InputStream is = null;
		
		InputStreamReader isr = null;
		BufferedReader br = null;
		try {
			is = sock.getInputStream();
			isr = new InputStreamReader(is);
			br = new BufferedReader(isr);
			
			while(true){
				String msg = br.readLine();
				if(msg==null){break;}
				sayAll(msg);
			}
		} catch (IOException e) {
		} finally{
			try {
				if(sock!=null)sock.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	public static void main(String[] args) {
		ServerSocket serve = null;
//	남의 소켓을 알 수 있는 부분! 어째서?
		try {
			serve = new ServerSocket(5000);
			while(true){
				Socket sock = serve.accept();
				InetAddress addr = sock.getInetAddress();
				System.out.println(addr.getHostAddress() + " 님이 접속하셨습니다");
//	list에 생성되는 Socket들을 담아냄
				list.add(sock);
				BitServer thr = new BitServer();
				thr.sock = sock;
				thr.start();
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally{
				try {
					if(serve!=null)serve.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
		}
	}

}
